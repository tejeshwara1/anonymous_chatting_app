{"version":3,"sources":["firebase.js","Msg.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","db","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Msg","props","text","Button","variant","color","onClick","collection","doc","id","delete","styles","btn","marginLeft","marginTop","App","useState","msgs","setMsgs","input","setInput","position","length","pop","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","className","latitude","longitude","FormControl","InputLabel","htmlFor","Input","aria-describedby","value","onChange","event","target","preventDefault","randomString","Math","random","toString","substring","set","completed","timestamp","FieldValue","serverTimestamp","type","disabled","style","listStyleType","msg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQACAA,EAAQ,IAAUC,SAClB,IAUeC,EAVDC,IAASC,cAAc,CACjCC,OAAQC,0CACRC,WAAY,qCACZC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAEFC,YCiCFC,MAxCf,SAAaC,GACX,OACE,8BAEI,+BACGA,EAAMC,KADT,eAsBI,cAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,YACNC,QAAS,kBAAMlB,EAAGmB,WAAW,YAAYC,IAAIP,EAAMQ,IAAIC,UAHzD,0BCxBNC,EAAS,CACbC,IAAK,CACHC,WAAY,GACZC,UAAW,KAsEAC,MAlEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGmBJ,mBAAS,IAH5B,mBAGNK,EAHM,KA4Bb,OA5Ba,KAITJ,EAAKK,OAAS,IAChBlC,EAAGmB,WAAW,YAAYC,IAAIS,EAAKM,MAAL,IAAkBb,SAGlDc,qBAAU,WACRpC,EAAGmB,WAAW,YACXkB,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXT,EAAQS,EAASC,KAAKC,KAAI,SAACrB,GAAD,OAASA,EAAIsB,gBAE1C,IAeD,sBAAKC,UAAU,MAAf,UACE,4BAAIV,EAASW,WACb,4BAAIX,EAASY,YAEb,iCACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,WAApB,0BACA,cAACC,EAAA,EAAD,CACE5B,GAAG,WACH6B,mBAAiB,iBACjBC,MAAOpB,EACPqB,SAAU,SAACC,GACTrB,EAASqB,EAAMC,OAAOH,aAK5B,cAACpC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAjCO,SAACmC,GACdA,EAAME,iBACN,IAAMC,EAAeC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAC1D5D,EAAGmB,WAAW,YAAYC,IAAIoC,GAAcK,IAAI,CAC9C/C,KAAMiB,EACNV,GAAImC,EACJM,WAAW,EACXC,UAAW9D,IAASU,UAAUqD,WAAWC,oBAE3CjC,EAAS,KAyBHkC,KAAK,SACLC,UAAWpC,EACXqC,MAAO7C,EAAOC,IANhB,oBAWF,oBAAI4C,MAAO,CAAEC,cAAe,QAA5B,SACGxC,EAAKY,KAAI,SAAC6B,GAAD,OACR,cAAC,EAAD,CAAkBxD,KAAMwD,EAAIxD,KAAMO,GAAIiD,EAAIjD,GAAIJ,MAAOqD,EAAIR,WAA/CQ,EAAIjD,aC5DTkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dd5278c7.chunk.js","sourcesContent":["import firebase from \"firebase\";\nrequire(\"dotenv\").config();\nconst myApp = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: \"chatting-anonymous.firebaseapp.com\",\n    projectId: \"chatting-anonymous\",\n    storageBucket: \"chatting-anonymous.appspot.com\",\n    messagingSenderId: \"906481963206\",\n    appId: \"1:906481963206:web:a75e8c6ca2506504b147c7\",\n    measurementId: \"G-TRJRGGVHRS\"\n});\nconst db = myApp.firestore();\nexport default db;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport db from \"./firebase\";\n\nfunction Msg(props) {\n  return (\n    <div>\n      {\n        <li>\n          {props.text}&nbsp;&nbsp;&nbsp;\n          {\n            /* <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() =>\n              props.color\n                ? db\n                    .collection(\"messages\")\n                    .doc(props.id)\n                    .update({ completed: false })\n                : db\n                    .collection(\"messages\")\n                    .doc(props.id)\n                    .update({ completed: true })\n            }\n            style={props.color ? { opacity: 0.3 } : { opacity: 1 }}\n          >\n            done\n          </Button>\n          */\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => db.collection(\"messages\").doc(props.id).delete()}\n            >\n              delete\n            </Button>\n          }\n        </li>\n      }\n    </div>\n  );\n}\n\nexport default Msg;\n","import \"./App.css\";\nimport { Button, FormControl, InputLabel, Input } from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport Msg from \"./Msg\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nconst styles = {\n  btn: {\n    marginLeft: 20,\n    marginTop: 10,\n  },\n};\n\nfunction App() {\n  const [msgs, setMsgs] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [position, setposition] = useState({});\n  if (msgs.length > 10) {\n    db.collection(\"messages\").doc(msgs.pop()[\"id\"]).delete();\n  }\n\n  useEffect(() => {\n    db.collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setMsgs(snapshot.docs.map((doc) => doc.data()));\n      });\n  }, []);\n\n  const addmsg = (event) => {\n    event.preventDefault();\n    const randomString = Math.random().toString(36).substring(7);\n    db.collection(\"messages\").doc(randomString).set({\n      text: input,\n      id: randomString,\n      completed: false,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <p>{position.latitude}</p>\n      <p>{position.longitude}</p>\n\n      <form>\n        <FormControl>\n          <InputLabel htmlFor=\"my-input\">Type Message</InputLabel>\n          <Input\n            id=\"my-input\"\n            aria-describedby=\"my-helper-text\"\n            value={input}\n            onChange={(event) => {\n              setInput(event.target.value);\n            }}\n          />\n          {/* <FormHelperText id=\"my-helper-text\">hahah</FormHelperText> */}\n        </FormControl>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={addmsg}\n          type=\"submit\"\n          disabled={!input}\n          style={styles.btn}\n        >\n          add\n        </Button>\n      </form>\n      <ul style={{ listStyleType: \"none\" }}>\n        {msgs.map((msg) => (\n          <Msg key={msg.id} text={msg.text} id={msg.id} color={msg.completed} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}